{"version":3,"sources":["../src/Btc.js"],"names":["signMessage","getWalletPublicKey","splitTransaction","getTrustedInput","getTrustedInputBIP143","createTransaction","signP2SHTransaction","serializeTransactionOutputs","Btc","constructor","transport","scrambleKey","decorateAppAPIMethods","path","opts","options","arguments","length","console","warn","verify","format","signMessageNew","messageHex","createPaymentTransactionNew","arg","fromDeprecateArguments","inputs","associatedKeysets","outputScriptHex","lockTime","sigHashType","segwit","transactionVersion","transactionHex","isSegwitSupported","hasTimestamp","hasExtraData","additionals","t","indexLookup","transaction","args","keys","obj","forEach","key","i","value","undefined"],"mappings":"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","sourcesContent":["//@flow\nimport type Transport from \"@ledgerhq/hw-transport\";\nimport { signMessage } from \"./signMessage\";\nimport { getWalletPublicKey } from \"./getWalletPublicKey\";\nimport type { AddressFormat } from \"./getWalletPublicKey\";\nimport { splitTransaction } from \"./splitTransaction\";\nimport { getTrustedInput } from \"./getTrustedInput\";\nimport { getTrustedInputBIP143 } from \"./getTrustedInputBIP143\";\nimport type { Transaction } from \"./types\";\nimport { createTransaction } from \"./createTransaction\";\nimport type { CreateTransactionArg } from \"./createTransaction\";\nimport { signP2SHTransaction } from \"./signP2SHTransaction\";\nimport type { SignP2SHTransactionArg } from \"./signP2SHTransaction\";\nimport { serializeTransactionOutputs } from \"./serializeTransaction\";\n\nexport type { AddressFormat };\n\n/**\n * Bitcoin API.\n *\n * @example\n * import Btc from \"@ledgerhq/hw-app-btc\";\n * const btc = new Btc(transport)\n */\nexport default class Btc {\n  transport: Transport<*>;\n\n  constructor(transport: Transport<*>, scrambleKey: string = \"BTC\") {\n    this.transport = transport;\n    transport.decorateAppAPIMethods(\n      this,\n      [\n        \"getWalletPublicKey\",\n        \"signP2SHTransaction\",\n        \"signMessageNew\",\n        \"createPaymentTransactionNew\",\n        \"getTrustedInput\",\n        \"getTrustedInputBIP143\",\n      ],\n      scrambleKey\n    );\n  }\n\n  /**\n   * @param path a BIP 32 path\n   * @param options an object with optional these fields:\n   *\n   * - verify (boolean) will ask user to confirm the address on the device\n   *\n   * - format (\"legacy\" | \"p2sh\" | \"bech32\" | \"cashaddr\") to use different bitcoin address formatter.\n   *\n   * NB The normal usage is to use:\n   *\n   * - legacy format with 44' paths\n   *\n   * - p2sh format with 49' paths\n   *\n   * - bech32 format with 173' paths\n   *\n   * - cashaddr in case of Bitcoin Cash\n   *\n   * @example\n   * btc.getWalletPublicKey(\"44'/0'/0'/0/0\").then(o => o.bitcoinAddress)\n   * btc.getWalletPublicKey(\"49'/0'/0'/0/0\", { format: \"p2sh\" }).then(o => o.bitcoinAddress)\n   */\n  getWalletPublicKey(\n    path: string,\n    opts?: boolean | { verify?: boolean, format?: AddressFormat }\n  ): Promise<{\n    publicKey: string,\n    bitcoinAddress: string,\n    chainCode: string,\n  }> {\n    let options;\n    if (arguments.length > 2 || typeof opts === \"boolean\") {\n      console.warn(\n        \"btc.getWalletPublicKey deprecated signature used. Please switch to getWalletPublicKey(path, { format, verify })\"\n      );\n      options = {\n        verify: !!opts,\n        format: arguments[2] ? \"p2sh\" : \"legacy\",\n      };\n    } else {\n      options = opts || {};\n    }\n    return getWalletPublicKey(this.transport, { ...options, path });\n  }\n\n  /**\n   * You can sign a message according to the Bitcoin Signature format and retrieve v, r, s given the message and the BIP 32 path of the account to sign.\n   * @example\n   btc.signMessageNew_async(\"44'/60'/0'/0'/0\", Buffer.from(\"test\").toString(\"hex\")).then(function(result) {\n     var v = result['v'] + 27 + 4;\n     var signature = Buffer.from(v.toString(16) + result['r'] + result['s'], 'hex').toString('base64');\n     console.log(\"Signature : \" + signature);\n   }).catch(function(ex) {console.log(ex);});\n   */\n  signMessageNew(\n    path: string,\n    messageHex: string\n  ): Promise<{ v: number, r: string, s: string }> {\n    return signMessage(this.transport, { path, messageHex });\n  }\n\n  /**\n   * To sign a transaction involving standard (P2PKH) inputs, call createTransaction with the following parameters\n   * @param inputs is an array of [ transaction, output_index, optional redeem script, optional sequence ] where\n   *\n   * * transaction is the previously computed transaction object for this UTXO\n   * * output_index is the output in the transaction used as input for this UTXO (counting from 0)\n   * * redeem script is the optional redeem script to use when consuming a Segregated Witness input\n   * * sequence is the sequence number to use for this input (when using RBF), or non present\n   * @param associatedKeysets is an array of BIP 32 paths pointing to the path to the private key used for each UTXO\n   * @param changePath is an optional BIP 32 path pointing to the path to the public key used to compute the change address\n   * @param outputScriptHex is the hexadecimal serialized outputs of the transaction to sign\n   * @param lockTime is the optional lockTime of the transaction to sign, or default (0)\n   * @param sigHashType is the hash type of the transaction to sign, or default (all)\n   * @param segwit is an optional boolean indicating wether to use segwit or not\n   * @param initialTimestamp is an optional timestamp of the function call to use for coins that necessitate timestamps only, (not the one that the tx will include)\n   * @param additionals list of additionnal options\n   *\n   * - \"bech32\" for spending native segwit outputs\n   * - \"abc\" for bch\n   * - \"gold\" for btg\n   * - \"bipxxx\" for using BIPxxx\n   * - \"sapling\" to indicate a zec transaction is supporting sapling (to be set over block 419200)\n   * @param expiryHeight is an optional Buffer for zec overwinter / sapling Txs\n   * @param useTrustedInputForSegwit trust inputs for segwit transactions\n   * @return the signed transaction ready to be broadcast\n   * @example\nbtc.createTransaction({\n   inputs: [ [tx1, 1] ],\n   associatedKeysets: [\"0'/0/0\"],\n   outputScriptHex: \"01905f0100000000001976a91472a5d75c8d2d0565b656a5232703b167d50d5a2b88ac\"\n}).then(res => ...);\n   */\n  createPaymentTransactionNew(arg: CreateTransactionArg) {\n    if (arguments.length > 1) {\n      console.warn(\n        \"@ledgerhq/hw-app-btc: createPaymentTransactionNew multi argument signature is deprecated. please switch to named parameters.\"\n      );\n      arg = fromDeprecateArguments(arguments, [\n        \"inputs\",\n        \"associatedKeysets\",\n        \"changePath\",\n        \"outputScriptHex\",\n        \"lockTime\",\n        \"sigHashType\",\n        \"segwit\",\n        \"initialTimestamp\",\n        \"additionals\",\n        \"expiryHeight\",\n        \"useTrustedInputForSegwit\",\n      ]);\n    }\n    return createTransaction(this.transport, arg);\n  }\n\n  /**\n   * To obtain the signature of multisignature (P2SH) inputs, call signP2SHTransaction_async with the folowing parameters\n   * @param inputs is an array of [ transaction, output_index, redeem script, optional sequence ] where\n   * * transaction is the previously computed transaction object for this UTXO\n   * * output_index is the output in the transaction used as input for this UTXO (counting from 0)\n   * * redeem script is the mandatory redeem script associated to the current P2SH input\n   * * sequence is the sequence number to use for this input (when using RBF), or non present\n   * @param associatedKeysets is an array of BIP 32 paths pointing to the path to the private key used for each UTXO\n   * @param outputScriptHex is the hexadecimal serialized outputs of the transaction to sign\n   * @param lockTime is the optional lockTime of the transaction to sign, or default (0)\n   * @param sigHashType is the hash type of the transaction to sign, or default (all)\n   * @return the signed transaction ready to be broadcast\n   * @example\nbtc.signP2SHTransaction({\n inputs: [ [tx, 1, \"52210289b4a3ad52a919abd2bdd6920d8a6879b1e788c38aa76f0440a6f32a9f1996d02103a3393b1439d1693b063482c04bd40142db97bdf139eedd1b51ffb7070a37eac321030b9a409a1e476b0d5d17b804fcdb81cf30f9b99c6f3ae1178206e08bc500639853ae\"] ],\n associatedKeysets: [\"0'/0/0\"],\n outputScriptHex: \"01905f0100000000001976a91472a5d75c8d2d0565b656a5232703b167d50d5a2b88ac\"\n}).then(result => ...);\n   */\n  signP2SHTransaction(arg: SignP2SHTransactionArg) {\n    if (arguments.length > 1) {\n      console.warn(\n        \"@ledgerhq/hw-app-btc: signP2SHTransaction multi argument signature is deprecated. please switch to named parameters.\"\n      );\n      const [\n        inputs,\n        associatedKeysets,\n        outputScriptHex,\n        lockTime,\n        sigHashType,\n        segwit,\n        transactionVersion,\n      ] = arguments;\n      arg = {\n        inputs,\n        associatedKeysets,\n        outputScriptHex,\n        lockTime,\n        sigHashType,\n        segwit,\n        transactionVersion,\n      };\n      arg = fromDeprecateArguments(arguments, [\n        \"inputs\",\n        \"associatedKeysets\",\n        \"outputScriptHex\",\n        \"lockTime\",\n        \"sigHashType\",\n        \"segwit\",\n        \"transactionVersion\",\n      ]);\n    }\n    return signP2SHTransaction(this.transport, arg);\n  }\n\n  /**\n   * For each UTXO included in your transaction, create a transaction object from the raw serialized version of the transaction used in this UTXO.\n   * @example\nconst tx1 = btc.splitTransaction(\"01000000014ea60aeac5252c14291d428915bd7ccd1bfc4af009f4d4dc57ae597ed0420b71010000008a47304402201f36a12c240dbf9e566bc04321050b1984cd6eaf6caee8f02bb0bfec08e3354b022012ee2aeadcbbfd1e92959f57c15c1c6debb757b798451b104665aa3010569b49014104090b15bde569386734abf2a2b99f9ca6a50656627e77de663ca7325702769986cf26cc9dd7fdea0af432c8e2becc867c932e1b9dd742f2a108997c2252e2bdebffffffff0281b72e00000000001976a91472a5d75c8d2d0565b656a5232703b167d50d5a2b88aca0860100000000001976a9144533f5fb9b4817f713c48f0bfe96b9f50c476c9b88ac00000000\");\n   */\n  splitTransaction(\n    transactionHex: string,\n    isSegwitSupported: ?boolean = false,\n    hasTimestamp?: boolean = false,\n    hasExtraData?: boolean = false,\n    additionals: Array<string> = []\n  ): Transaction {\n    return splitTransaction(\n      transactionHex,\n      isSegwitSupported,\n      hasTimestamp,\n      hasExtraData,\n      additionals\n    );\n  }\n\n  /**\n  @example\nconst tx1 = btc.splitTransaction(\"01000000014ea60aeac5252c14291d428915bd7ccd1bfc4af009f4d4dc57ae597ed0420b71010000008a47304402201f36a12c240dbf9e566bc04321050b1984cd6eaf6caee8f02bb0bfec08e3354b022012ee2aeadcbbfd1e92959f57c15c1c6debb757b798451b104665aa3010569b49014104090b15bde569386734abf2a2b99f9ca6a50656627e77de663ca7325702769986cf26cc9dd7fdea0af432c8e2becc867c932e1b9dd742f2a108997c2252e2bdebffffffff0281b72e00000000001976a91472a5d75c8d2d0565b656a5232703b167d50d5a2b88aca0860100000000001976a9144533f5fb9b4817f713c48f0bfe96b9f50c476c9b88ac00000000\");\nconst outputScript = btc.serializeTransactionOutputs(tx1).toString('hex');\n  */\n  serializeTransactionOutputs(t: Transaction): Buffer {\n    return serializeTransactionOutputs(t);\n  }\n\n  getTrustedInput(\n    indexLookup: number,\n    transaction: Transaction,\n    additionals: Array<string> = []\n  ): Promise<string> {\n    return getTrustedInput(\n      this.transport,\n      indexLookup,\n      transaction,\n      additionals\n    );\n  }\n\n  getTrustedInputBIP143(\n    indexLookup: number,\n    transaction: Transaction,\n    additionals: Array<string> = []\n  ): string {\n    return getTrustedInputBIP143(\n      this.transport,\n      indexLookup,\n      transaction,\n      additionals\n    );\n  }\n}\n\nfunction fromDeprecateArguments(args, keys) {\n  const obj = {};\n  keys.forEach((key, i) => {\n    const value = args[i];\n    if (value !== undefined) {\n      obj[key] = value;\n    }\n  });\n  return obj;\n}\n"],"file":"Btc.js"}