{"version":3,"sources":["../src/bip32.js"],"names":["bippath","bip32asBuffer","path","paths","fromString","toPathArray","buffer","Buffer","alloc","length","forEach","element","index","writeUInt32BE"],"mappings":"AAEA,OAAOA,OAAP,MAAoB,YAApB;AAEA,OAAO,SAASC,aAAT,CAAuBC,IAAvB,EAA6C;AAClD,QAAMC,KAAK,GAAG,CAACD,IAAD,GAAQ,EAAR,GAAaF,OAAO,CAACI,UAAR,CAAmBF,IAAnB,EAAyBG,WAAzB,EAA3B;AACA,MAAIC,MAAM,GAAGC,MAAM,CAACC,KAAP,CAAa,IAAIL,KAAK,CAACM,MAAN,GAAe,CAAhC,CAAb;AACAH,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYH,KAAK,CAACM,MAAlB;AACAN,EAAAA,KAAK,CAACO,OAAN,CAAc,CAACC,OAAD,EAAUC,KAAV,KAAoB;AAChCN,IAAAA,MAAM,CAACO,aAAP,CAAqBF,OAArB,EAA8B,IAAI,IAAIC,KAAtC;AACD,GAFD;AAGA,SAAON,MAAP;AACD","sourcesContent":["// @flow\n\nimport bippath from \"bip32-path\";\n\nexport function bip32asBuffer(path: string): Buffer {\n  const paths = !path ? [] : bippath.fromString(path).toPathArray();\n  let buffer = Buffer.alloc(1 + paths.length * 4);\n  buffer[0] = paths.length;\n  paths.forEach((element, index) => {\n    buffer.writeUInt32BE(element, 1 + 4 * index);\n  });\n  return buffer;\n}\n"],"file":"bip32.js"}