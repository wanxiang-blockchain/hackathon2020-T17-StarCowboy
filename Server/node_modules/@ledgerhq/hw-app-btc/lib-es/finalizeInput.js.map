{"version":3,"sources":["../src/finalizeInput.js"],"names":["Transport","bip32asBuffer","MAX_SCRIPT_BLOCK","provideOutputFullChangePath","transport","path","buffer","send","hashOutputFull","outputScript","additionals","offset","p1","isDecred","includes","length","blockSize","data","slice"],"mappings":"AACA,OAAOA,SAAP,MAAsB,wBAAtB;AACA,SAASC,aAAT,QAA8B,SAA9B;AACA,SAASC,gBAAT,QAAiC,aAAjC;AAEA,OAAO,SAASC,2BAAT,CACLC,SADK,EAELC,IAFK,EAGY;AACjB,MAAIC,MAAM,GAAGL,aAAa,CAACI,IAAD,CAA1B;AACA,SAAOD,SAAS,CAACG,IAAV,CAAe,IAAf,EAAqB,IAArB,EAA2B,IAA3B,EAAiC,IAAjC,EAAuCD,MAAvC,CAAP;AACD;AAED,OAAO,eAAeE,cAAf,CACLJ,SADK,EAELK,YAFK,EAGLC,WAA0B,GAAG,EAHxB,EAIU;AACf,MAAIC,MAAM,GAAG,CAAb;AACA,MAAIC,EAAE,GAAG,IAAT;AACA,QAAMC,QAAQ,GAAGH,WAAW,CAACI,QAAZ,CAAqB,QAArB,CAAjB,CAHe,CAIf;AACA;;AACA,MAAID,QAAJ,EAAc;AACZ,WAAOT,SAAS,CAACG,IAAV,CAAe,IAAf,EAAqB,IAArB,EAA2BK,EAA3B,EAA+B,IAA/B,EAAqCH,YAArC,CAAP;AACD;;AAED,SAAOE,MAAM,GAAGF,YAAY,CAACM,MAA7B,EAAqC;AACnC,QAAIC,SAAS,GACXL,MAAM,GAAGT,gBAAT,IAA6BO,YAAY,CAACM,MAA1C,GACIN,YAAY,CAACM,MAAb,GAAsBJ,MAD1B,GAEIT,gBAHN;AAIA,QAAIU,EAAE,GAAGD,MAAM,GAAGK,SAAT,KAAuBP,YAAY,CAACM,MAApC,GAA6C,IAA7C,GAAoD,IAA7D;AACA,QAAIE,IAAI,GAAGR,YAAY,CAACS,KAAb,CAAmBP,MAAnB,EAA2BA,MAAM,GAAGK,SAApC,CAAX;AACA,UAAMZ,SAAS,CAACG,IAAV,CAAe,IAAf,EAAqB,IAArB,EAA2BK,EAA3B,EAA+B,IAA/B,EAAqCK,IAArC,CAAN;AACAN,IAAAA,MAAM,IAAIK,SAAV;AACD;AACF","sourcesContent":["// @flow\nimport Transport from \"@ledgerhq/hw-transport\";\nimport { bip32asBuffer } from \"./bip32\";\nimport { MAX_SCRIPT_BLOCK } from \"./constants\";\n\nexport function provideOutputFullChangePath(\n  transport: Transport<*>,\n  path: string\n): Promise<string> {\n  let buffer = bip32asBuffer(path);\n  return transport.send(0xe0, 0x4a, 0xff, 0x00, buffer);\n}\n\nexport async function hashOutputFull(\n  transport: Transport<*>,\n  outputScript: Buffer,\n  additionals: Array<string> = []\n): Promise<void> {\n  let offset = 0;\n  let p1 = 0x80;\n  const isDecred = additionals.includes(\"decred\");\n  ///WARNING: Decred works only with one call (without chunking)\n  //TODO: test without this for Decred\n  if (isDecred) {\n    return transport.send(0xe0, 0x4a, p1, 0x00, outputScript);\n  }\n\n  while (offset < outputScript.length) {\n    let blockSize =\n      offset + MAX_SCRIPT_BLOCK >= outputScript.length\n        ? outputScript.length - offset\n        : MAX_SCRIPT_BLOCK;\n    let p1 = offset + blockSize === outputScript.length ? 0x80 : 0x00;\n    let data = outputScript.slice(offset, offset + blockSize);\n    await transport.send(0xe0, 0x4a, p1, 0x00, data);\n    offset += blockSize;\n  }\n}\n"],"file":"finalizeInput.js"}