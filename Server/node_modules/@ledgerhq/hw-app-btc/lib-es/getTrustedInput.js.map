{"version":3,"sources":["../src/getTrustedInput.js"],"names":["invariant","MAX_SCRIPT_BLOCK","createVarint","getTrustedInputRaw","transport","transactionData","indexLookup","data","firstRound","prefix","Buffer","alloc","writeUInt32BE","concat","length","trustedInput","send","res","slice","toString","getTrustedInput","transaction","additionals","version","inputs","outputs","locktime","nExpiryHeight","extraData","Error","isDecred","includes","isXST","processScriptBlocks","script","sequence","seq","scriptBlocks","offset","blockSize","push","scriptBlock","processWholeScriptBlock","block","timestamp","nVersionGroupId","input","isXSTV2","compare","from","treeField","tree","prevout","output","amount","endData","extraPart"],"mappings":"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","sourcesContent":["// @flow\nimport invariant from \"invariant\";\nimport type Transport from \"@ledgerhq/hw-transport\";\nimport type { Transaction } from \"./types\";\nimport { MAX_SCRIPT_BLOCK } from \"./constants\";\nimport { createVarint } from \"./varint\";\n\nexport async function getTrustedInputRaw(\n  transport: Transport<*>,\n  transactionData: Buffer,\n  indexLookup: ?number\n): Promise<string> {\n  let data;\n  let firstRound = false;\n  if (typeof indexLookup === \"number\") {\n    firstRound = true;\n    const prefix = Buffer.alloc(4);\n    prefix.writeUInt32BE(indexLookup, 0);\n    data = Buffer.concat([prefix, transactionData], transactionData.length + 4);\n  } else {\n    data = transactionData;\n  }\n  const trustedInput = await transport.send(\n    0xe0,\n    0x42,\n    firstRound ? 0x00 : 0x80,\n    0x00,\n    data\n  );\n\n  const res = trustedInput.slice(0, trustedInput.length - 2).toString(\"hex\");\n  return res;\n}\n\nexport async function getTrustedInput(\n  transport: Transport<*>,\n  indexLookup: number,\n  transaction: Transaction,\n  additionals: Array<string> = []\n): Promise<string> {\n  const {\n    version,\n    inputs,\n    outputs,\n    locktime,\n    nExpiryHeight,\n    extraData,\n  } = transaction;\n  if (!outputs || !locktime) {\n    throw new Error(\"getTrustedInput: locktime & outputs is expected\");\n  }\n  const isDecred = additionals.includes(\"decred\");\n  const isXST = additionals.includes(\"stealthcoin\");\n\n  const processScriptBlocks = async (script, sequence) => {\n    const seq = sequence || Buffer.alloc(0);\n    const scriptBlocks = [];\n    let offset = 0;\n    while (offset !== script.length) {\n      let blockSize =\n        script.length - offset > MAX_SCRIPT_BLOCK\n          ? MAX_SCRIPT_BLOCK\n          : script.length - offset;\n      if (offset + blockSize !== script.length) {\n        scriptBlocks.push(script.slice(offset, offset + blockSize));\n      } else {\n        scriptBlocks.push(\n          Buffer.concat([script.slice(offset, offset + blockSize), seq])\n        );\n      }\n      offset += blockSize;\n    }\n\n    // Handle case when no script length: we still want to pass the sequence\n    // relatable: https://github.com/LedgerHQ/ledger-live-desktop/issues/1386\n    if (script.length === 0) {\n      scriptBlocks.push(seq);\n    }\n\n    let res;\n    for (let scriptBlock of scriptBlocks) {\n      res = await getTrustedInputRaw(transport, scriptBlock);\n    }\n    return res;\n  };\n\n  const processWholeScriptBlock = (block) =>\n    getTrustedInputRaw(transport, block);\n\n  await getTrustedInputRaw(\n    transport,\n    Buffer.concat([\n      transaction.version,\n      transaction.timestamp || Buffer.alloc(0),\n      transaction.nVersionGroupId || Buffer.alloc(0),\n      createVarint(inputs.length),\n    ]),\n    indexLookup\n  );\n\n  for (let input of inputs) {\n    const isXSTV2 =\n      isXST &&\n      Buffer.compare(version, Buffer.from([0x02, 0x00, 0x00, 0x00])) === 0;\n    const treeField = isDecred\n      ? input.tree || Buffer.from([0x00])\n      : Buffer.alloc(0);\n    const data = Buffer.concat([\n      input.prevout,\n      treeField,\n      isXSTV2 ? Buffer.from([0x00]) : createVarint(input.script.length),\n    ]);\n    await getTrustedInputRaw(transport, data);\n\n    // iteration (eachSeries) ended\n    // TODO notify progress\n    // deferred.notify(\"input\");\n    // Reference: https://github.com/StealthSend/Stealth/commit/5be35d6c2c500b32ed82e5d6913d66d18a4b0a7f#diff-e8db9b851adc2422aadfffca88f14c91R566\n    await (isDecred\n      ? processWholeScriptBlock(Buffer.concat([input.script, input.sequence]))\n      : isXSTV2\n      ? processWholeScriptBlock(input.sequence)\n      : processScriptBlocks(input.script, input.sequence));\n  }\n\n  await getTrustedInputRaw(transport, createVarint(outputs.length));\n\n  for (let output of outputs) {\n    const data = Buffer.concat([\n      output.amount,\n      isDecred ? Buffer.from([0x00, 0x00]) : Buffer.alloc(0), //Version script\n      createVarint(output.script.length),\n      output.script,\n    ]);\n    await getTrustedInputRaw(transport, data);\n  }\n\n  const endData = [];\n\n  if (nExpiryHeight && nExpiryHeight.length > 0) {\n    endData.push(nExpiryHeight);\n  }\n\n  if (extraData && extraData.length > 0) {\n    endData.push(extraData);\n  }\n\n  let extraPart;\n  if (endData.length) {\n    const data = Buffer.concat(endData);\n    extraPart = isDecred\n      ? data\n      : Buffer.concat([createVarint(data.length), data]);\n  }\n\n  const res = await processScriptBlocks(\n    Buffer.concat([locktime, extraPart || Buffer.alloc(0)])\n  );\n\n  invariant(res, \"missing result in processScriptBlocks\");\n\n  return res;\n}\n"],"file":"getTrustedInput.js"}