{"version":3,"sources":["../src/getTrustedInputBIP143.js"],"names":["Transport","shajs","serializeTransaction","getTrustedInputBIP143","transport","indexLookup","transaction","additionals","Error","isDecred","includes","hash","update","digest","data","Buffer","alloc","writeUInt32LE","outputs","locktime","concat","amount","toString"],"mappings":"AAEA,OAAOA,SAAP,MAAsB,wBAAtB;AACA,OAAOC,KAAP,MAAkB,QAAlB;AAEA,SAASC,oBAAT,QAAqC,wBAArC;AAEA,OAAO,SAASC,qBAAT,CACLC,SADK,EAELC,WAFK,EAGLC,WAHK,EAILC,WAA0B,GAAG,EAJxB,EAKL;AACA,MAAI,CAACD,WAAL,EAAkB;AAChB,UAAM,IAAIE,KAAJ,CAAU,mCAAV,CAAN;AACD;;AACD,QAAMC,QAAQ,GAAGF,WAAW,CAACG,QAAZ,CAAqB,QAArB,CAAjB;;AACA,MAAID,QAAJ,EAAc;AACZ,UAAM,IAAID,KAAJ,CAAU,kCAAV,CAAN;AACD;;AACD,MAAIG,IAAI,GAAGV,KAAK,CAAC,QAAD,CAAL,CACRW,MADQ,CAEPX,KAAK,CAAC,QAAD,CAAL,CAAgBW,MAAhB,CAAuBV,oBAAoB,CAACI,WAAD,EAAc,IAAd,CAA3C,EAAgEO,MAAhE,EAFO,EAIRA,MAJQ,EAAX;AAKA,QAAMC,IAAI,GAAGC,MAAM,CAACC,KAAP,CAAa,CAAb,CAAb;AACAF,EAAAA,IAAI,CAACG,aAAL,CAAmBZ,WAAnB,EAAgC,CAAhC;AACA,QAAM;AAAEa,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAwBb,WAA9B;;AACA,MAAI,CAACY,OAAD,IAAY,CAACC,QAAjB,EAA2B;AACzB,UAAM,IAAIX,KAAJ,CAAU,uDAAV,CAAN;AACD;;AACD,MAAI,CAACU,OAAO,CAACb,WAAD,CAAZ,EAA2B;AACzB,UAAM,IAAIG,KAAJ,CAAU,oCAAV,CAAN;AACD;;AACDG,EAAAA,IAAI,GAAGI,MAAM,CAACK,MAAP,CAAc,CAACT,IAAD,EAAOG,IAAP,EAAaI,OAAO,CAACb,WAAD,CAAP,CAAqBgB,MAAlC,CAAd,CAAP;AACA,SAAOV,IAAI,CAACW,QAAL,CAAc,KAAd,CAAP;AACD","sourcesContent":["//@flow\n\nimport Transport from \"@ledgerhq/hw-transport\";\nimport shajs from \"sha.js\";\nimport type { Transaction } from \"./types\";\nimport { serializeTransaction } from \"./serializeTransaction\";\n\nexport function getTrustedInputBIP143(\n  transport: Transport<*>,\n  indexLookup: number,\n  transaction: Transaction,\n  additionals: Array<string> = []\n) {\n  if (!transaction) {\n    throw new Error(\"getTrustedInputBIP143: missing tx\");\n  }\n  const isDecred = additionals.includes(\"decred\");\n  if (isDecred) {\n    throw new Error(\"Decred does not implement BIP143\");\n  }\n  let hash = shajs(\"sha256\")\n    .update(\n      shajs(\"sha256\").update(serializeTransaction(transaction, true)).digest()\n    )\n    .digest();\n  const data = Buffer.alloc(4);\n  data.writeUInt32LE(indexLookup, 0);\n  const { outputs, locktime } = transaction;\n  if (!outputs || !locktime) {\n    throw new Error(\"getTrustedInputBIP143: locktime & outputs is expected\");\n  }\n  if (!outputs[indexLookup]) {\n    throw new Error(\"getTrustedInputBIP143: wrong index\");\n  }\n  hash = Buffer.concat([hash, data, outputs[indexLookup].amount]);\n  return hash.toString(\"hex\");\n}\n"],"file":"getTrustedInputBIP143.js"}