{"version":3,"sources":["../src/serializeTransaction.js"],"names":["createVarint","serializeTransactionOutputs","outputs","outputBuffer","Buffer","alloc","concat","length","forEach","output","amount","script","serializeTransaction","transaction","skipWitness","timestamp","additionals","isDecred","includes","isBech32","inputBuffer","useWitness","inputs","input","prevout","from","sequence","locktime","witness","nExpiryHeight","extraData","version","nVersionGroupId"],"mappings":"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","sourcesContent":["// @flow\nimport type { Transaction } from \"./types\";\nimport { createVarint } from \"./varint\";\n\n/**\n  @example\nconst tx1 = btc.splitTransaction(\"01000000014ea60aeac5252c14291d428915bd7ccd1bfc4af009f4d4dc57ae597ed0420b71010000008a47304402201f36a12c240dbf9e566bc04321050b1984cd6eaf6caee8f02bb0bfec08e3354b022012ee2aeadcbbfd1e92959f57c15c1c6debb757b798451b104665aa3010569b49014104090b15bde569386734abf2a2b99f9ca6a50656627e77de663ca7325702769986cf26cc9dd7fdea0af432c8e2becc867c932e1b9dd742f2a108997c2252e2bdebffffffff0281b72e00000000001976a91472a5d75c8d2d0565b656a5232703b167d50d5a2b88aca0860100000000001976a9144533f5fb9b4817f713c48f0bfe96b9f50c476c9b88ac00000000\");\nconst outputScript = btc.serializeTransactionOutputs(tx1).toString('hex');\n  */\nexport function serializeTransactionOutputs({ outputs }: Transaction): Buffer {\n  let outputBuffer = Buffer.alloc(0);\n  if (typeof outputs !== \"undefined\") {\n    outputBuffer = Buffer.concat([outputBuffer, createVarint(outputs.length)]);\n    outputs.forEach((output) => {\n      outputBuffer = Buffer.concat([\n        outputBuffer,\n        output.amount,\n        createVarint(output.script.length),\n        output.script,\n      ]);\n    });\n  }\n  return outputBuffer;\n}\n\nexport function serializeTransaction(\n  transaction: Transaction,\n  skipWitness: boolean,\n  timestamp?: Buffer,\n  additionals: string[] = []\n) {\n  const isDecred = additionals.includes(\"decred\");\n  const isBech32 = additionals.includes(\"bech32\");\n  let inputBuffer = Buffer.alloc(0);\n  let useWitness = typeof transaction[\"witness\"] != \"undefined\" && !skipWitness;\n  transaction.inputs.forEach((input) => {\n    inputBuffer =\n      isDecred || isBech32\n        ? Buffer.concat([\n            inputBuffer,\n            input.prevout,\n            Buffer.from([0x00]), //tree\n            input.sequence,\n          ])\n        : Buffer.concat([\n            inputBuffer,\n            input.prevout,\n            createVarint(input.script.length),\n            input.script,\n            input.sequence,\n          ]);\n  });\n\n  let outputBuffer = serializeTransactionOutputs(transaction);\n  if (\n    typeof transaction.outputs !== \"undefined\" &&\n    typeof transaction.locktime !== \"undefined\"\n  ) {\n    outputBuffer = Buffer.concat([\n      outputBuffer,\n      (useWitness && transaction.witness) || Buffer.alloc(0),\n      transaction.locktime,\n      transaction.nExpiryHeight || Buffer.alloc(0),\n      transaction.extraData || Buffer.alloc(0),\n    ]);\n  }\n\n  return Buffer.concat([\n    transaction.version,\n    timestamp ? timestamp : Buffer.alloc(0),\n    transaction.nVersionGroupId || Buffer.alloc(0),\n    useWitness ? Buffer.from(\"0001\", \"hex\") : Buffer.alloc(0),\n    createVarint(transaction.inputs.length),\n    inputBuffer,\n    outputBuffer,\n  ]);\n}\n"],"file":"serializeTransaction.js"}