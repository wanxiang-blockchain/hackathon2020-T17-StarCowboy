{"version":3,"sources":["../src/signP2SHTransaction.js"],"names":["getTrustedInput","startUntrustedHashTransactionInput","getTrustedInputBIP143","signTransaction","hashOutputFull","DEFAULT_LOCKTIME","DEFAULT_VERSION","DEFAULT_SEQUENCE","SIGHASH_ALL","defaultArg","lockTime","sigHashType","segwit","transactionVersion","signP2SHTransaction","transport","arg","inputs","associatedKeysets","outputScriptHex","nullScript","Buffer","alloc","nullPrevout","defaultVersion","writeUInt32LE","trustedInputs","regularOutputs","signatures","firstRun","resuming","targetTransaction","version","getTrustedInputCall","outputScript","from","input","trustedInput","sequence","length","push","value","slice","outputs","index","i","script","prevout","pseudoTX","Object","assign","pseudoTrustedInputs","signature","toString"],"mappings":"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","sourcesContent":["//@flow\nimport type Transport from \"@ledgerhq/hw-transport\";\nimport { getTrustedInput } from \"./getTrustedInput\";\nimport { startUntrustedHashTransactionInput } from \"./startUntrustedHashTransactionInput\";\nimport { getTrustedInputBIP143 } from \"./getTrustedInputBIP143\";\nimport { signTransaction } from \"./signTransaction\";\nimport { hashOutputFull } from \"./finalizeInput\";\nimport type { TransactionOutput, Transaction } from \"./types\";\nimport {\n  DEFAULT_LOCKTIME,\n  DEFAULT_VERSION,\n  DEFAULT_SEQUENCE,\n  SIGHASH_ALL,\n} from \"./constants\";\n\nconst defaultArg = {\n  lockTime: DEFAULT_LOCKTIME,\n  sigHashType: SIGHASH_ALL,\n  segwit: false,\n  transactionVersion: DEFAULT_VERSION,\n};\n\n/**\n *\n */\nexport type SignP2SHTransactionArg = {\n  inputs: Array<[Transaction, number, ?string, ?number]>,\n  associatedKeysets: string[],\n  outputScriptHex: string,\n  lockTime?: number,\n  sigHashType?: number,\n  segwit?: boolean,\n  transactionVersion?: number,\n};\n\nexport async function signP2SHTransaction(\n  transport: Transport<*>,\n  arg: SignP2SHTransactionArg\n) {\n  const {\n    inputs,\n    associatedKeysets,\n    outputScriptHex,\n    lockTime,\n    sigHashType,\n    segwit,\n    transactionVersion,\n  } = { ...defaultArg, ...arg };\n  // Inputs are provided as arrays of [transaction, output_index, redeem script, optional sequence]\n  // associatedKeysets are provided as arrays of [path]\n  const nullScript = Buffer.alloc(0);\n  const nullPrevout = Buffer.alloc(0);\n  const defaultVersion = Buffer.alloc(4);\n  defaultVersion.writeUInt32LE(transactionVersion, 0);\n  const trustedInputs = [];\n  const regularOutputs: Array<TransactionOutput> = [];\n  const signatures = [];\n  let firstRun = true;\n  const resuming = false;\n  let targetTransaction: Transaction = {\n    inputs: [],\n    version: defaultVersion,\n  };\n\n  const getTrustedInputCall = segwit ? getTrustedInputBIP143 : getTrustedInput;\n  const outputScript = Buffer.from(outputScriptHex, \"hex\");\n\n  for (let input of inputs) {\n    if (!resuming) {\n      const trustedInput = await getTrustedInputCall(\n        transport,\n        input[1],\n        input[0]\n      );\n\n      let sequence = Buffer.alloc(4);\n      sequence.writeUInt32LE(\n        input.length >= 4 && typeof input[3] === \"number\"\n          ? input[3]\n          : DEFAULT_SEQUENCE,\n        0\n      );\n      trustedInputs.push({\n        trustedInput: false,\n        value: segwit\n          ? Buffer.from(trustedInput, \"hex\")\n          : Buffer.from(trustedInput, \"hex\").slice(4, 4 + 0x24),\n        sequence,\n      });\n    }\n\n    const { outputs } = input[0];\n    const index = input[1];\n    if (outputs && index <= outputs.length - 1) {\n      regularOutputs.push(outputs[index]);\n    }\n  }\n\n  // Pre-build the target transaction\n  for (let i = 0; i < inputs.length; i++) {\n    let sequence = Buffer.alloc(4);\n    sequence.writeUInt32LE(\n      inputs[i].length >= 4 && typeof inputs[i][3] === \"number\"\n        ? inputs[i][3]\n        : DEFAULT_SEQUENCE,\n      0\n    );\n    targetTransaction.inputs.push({\n      script: nullScript,\n      prevout: nullPrevout,\n      sequence,\n    });\n  }\n\n  if (segwit) {\n    await startUntrustedHashTransactionInput(\n      transport,\n      true,\n      targetTransaction,\n      trustedInputs,\n      true\n    );\n    await hashOutputFull(transport, outputScript);\n  }\n\n  for (let i = 0; i < inputs.length; i++) {\n    const input = inputs[i];\n    let script =\n      inputs[i].length >= 3 && typeof input[2] === \"string\"\n        ? Buffer.from(input[2], \"hex\")\n        : regularOutputs[i].script;\n    let pseudoTX = Object.assign({}, targetTransaction);\n    let pseudoTrustedInputs = segwit ? [trustedInputs[i]] : trustedInputs;\n    if (segwit) {\n      pseudoTX.inputs = [{ ...pseudoTX.inputs[i], script }];\n    } else {\n      pseudoTX.inputs[i].script = script;\n    }\n    await startUntrustedHashTransactionInput(\n      transport,\n      !segwit && firstRun,\n      pseudoTX,\n      pseudoTrustedInputs,\n      segwit\n    );\n\n    if (!segwit) {\n      await hashOutputFull(transport, outputScript);\n    }\n\n    const signature = await signTransaction(\n      transport,\n      associatedKeysets[i],\n      lockTime,\n      sigHashType\n    );\n\n    signatures.push(\n      segwit\n        ? signature.toString(\"hex\")\n        : signature.slice(0, signature.length - 1).toString(\"hex\")\n    );\n    targetTransaction.inputs[i].script = nullScript;\n    if (firstRun) {\n      firstRun = false;\n    }\n  }\n\n  return signatures;\n}\n"],"file":"signP2SHTransaction.js"}