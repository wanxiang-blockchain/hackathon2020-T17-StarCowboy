{"version":3,"sources":["../src/debug.js"],"names":["formatTransactionDebug","transaction","str","version","toString","locktime","witness","timestamp","nVersionGroupId","nExpiryHeight","extraData","inputs","forEach","prevout","script","sequence","i","outputs","amount","displayTransactionDebug","console","log"],"mappings":";;;;;;;;AAGO,SAASA,sBAAT,CAAgCC,WAAhC,EAA0D;AAC/D,MAAIC,GAAG,GAAG,IAAV;AACAA,EAAAA,GAAG,IAAI,cAAcD,WAAW,CAACE,OAAZ,CAAoBC,QAApB,CAA6B,KAA7B,CAArB;;AACA,MAAIH,WAAW,CAACI,QAAhB,EAA0B;AACxBH,IAAAA,GAAG,IAAI,eAAeD,WAAW,CAACI,QAAZ,CAAqBD,QAArB,CAA8B,KAA9B,CAAtB;AACD;;AACD,MAAIH,WAAW,CAACK,OAAhB,EAAyB;AACvBJ,IAAAA,GAAG,IAAI,cAAcD,WAAW,CAACK,OAAZ,CAAoBF,QAApB,CAA6B,KAA7B,CAArB;AACD;;AACD,MAAIH,WAAW,CAACM,SAAhB,EAA2B;AACzBL,IAAAA,GAAG,IAAI,gBAAgBD,WAAW,CAACM,SAAZ,CAAsBH,QAAtB,CAA+B,KAA/B,CAAvB;AACD;;AACD,MAAIH,WAAW,CAACO,eAAhB,EAAiC;AAC/BN,IAAAA,GAAG,IAAI,sBAAsBD,WAAW,CAACO,eAAZ,CAA4BJ,QAA5B,CAAqC,KAArC,CAA7B;AACD;;AACD,MAAIH,WAAW,CAACQ,aAAhB,EAA+B;AAC7BP,IAAAA,GAAG,IAAI,oBAAoBD,WAAW,CAACQ,aAAZ,CAA0BL,QAA1B,CAAmC,KAAnC,CAA3B;AACD;;AACD,MAAIH,WAAW,CAACS,SAAhB,EAA2B;AACzBR,IAAAA,GAAG,IAAI,gBAAgBD,WAAW,CAACS,SAAZ,CAAsBN,QAAtB,CAA+B,KAA/B,CAAvB;AACD;;AACDH,EAAAA,WAAW,CAACU,MAAZ,CAAmBC,OAAnB,CAA2B,CAAC;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,MAAX;AAAmBC,IAAAA;AAAnB,GAAD,EAAgCC,CAAhC,KAAsC;AAC/Dd,IAAAA,GAAG,IAAK,WAAUc,CAAE,GAApB;AACAd,IAAAA,GAAG,IAAK,YAAWW,OAAO,CAACT,QAAR,CAAiB,KAAjB,CAAwB,EAA3C;AACAF,IAAAA,GAAG,IAAK,WAAUY,MAAM,CAACV,QAAP,CAAgB,KAAhB,CAAuB,EAAzC;AACAF,IAAAA,GAAG,IAAK,aAAYa,QAAQ,CAACX,QAAT,CAAkB,KAAlB,CAAyB,EAA7C;AACD,GALD;AAMA,GAACH,WAAW,CAACgB,OAAZ,IAAuB,EAAxB,EAA4BL,OAA5B,CAAoC,CAAC;AAAEM,IAAAA,MAAF;AAAUJ,IAAAA;AAAV,GAAD,EAAqBE,CAArB,KAA2B;AAC7Dd,IAAAA,GAAG,IAAK,YAAWc,CAAE,GAArB;AACAd,IAAAA,GAAG,IAAK,WAAUgB,MAAM,CAACd,QAAP,CAAgB,KAAhB,CAAuB,EAAzC;AACAF,IAAAA,GAAG,IAAK,WAAUY,MAAM,CAACV,QAAP,CAAgB,KAAhB,CAAuB,EAAzC;AACD,GAJD;AAKA,SAAOF,GAAP;AACD;;AAEM,SAASiB,uBAAT,CAAiClB,WAAjC,EAA2D;AAChEmB,EAAAA,OAAO,CAACC,GAAR,CAAYrB,sBAAsB,CAACC,WAAD,CAAlC;AACD","sourcesContent":["// @flow\nimport type { Transaction } from \"./types\";\n\nexport function formatTransactionDebug(transaction: Transaction) {\n  let str = \"TX\";\n  str += \" version \" + transaction.version.toString(\"hex\");\n  if (transaction.locktime) {\n    str += \" locktime \" + transaction.locktime.toString(\"hex\");\n  }\n  if (transaction.witness) {\n    str += \" witness \" + transaction.witness.toString(\"hex\");\n  }\n  if (transaction.timestamp) {\n    str += \" timestamp \" + transaction.timestamp.toString(\"hex\");\n  }\n  if (transaction.nVersionGroupId) {\n    str += \" nVersionGroupId \" + transaction.nVersionGroupId.toString(\"hex\");\n  }\n  if (transaction.nExpiryHeight) {\n    str += \" nExpiryHeight \" + transaction.nExpiryHeight.toString(\"hex\");\n  }\n  if (transaction.extraData) {\n    str += \" extraData \" + transaction.extraData.toString(\"hex\");\n  }\n  transaction.inputs.forEach(({ prevout, script, sequence }, i) => {\n    str += `\\ninput ${i}:`;\n    str += ` prevout ${prevout.toString(\"hex\")}`;\n    str += ` script ${script.toString(\"hex\")}`;\n    str += ` sequence ${sequence.toString(\"hex\")}`;\n  });\n  (transaction.outputs || []).forEach(({ amount, script }, i) => {\n    str += `\\noutput ${i}:`;\n    str += ` amount ${amount.toString(\"hex\")}`;\n    str += ` script ${script.toString(\"hex\")}`;\n  });\n  return str;\n}\n\nexport function displayTransactionDebug(transaction: Transaction) {\n  console.log(formatTransactionDebug(transaction));\n}\n"],"file":"debug.js"}