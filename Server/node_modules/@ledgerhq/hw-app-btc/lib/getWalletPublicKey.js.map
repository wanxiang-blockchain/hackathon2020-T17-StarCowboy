{"version":3,"sources":["../src/getWalletPublicKey.js"],"names":["addressFormatMap","legacy","p2sh","bech32","cashaddr","getWalletPublicKey","transport","options","path","verify","format","Error","buffer","p1","p2","response","send","publicKeyLength","addressLength","publicKey","slice","toString","bitcoinAddress","chainCode"],"mappings":";;;;;;;AAEA;;;;;;;;AAOA,MAAMA,gBAAgB,GAAG;AACvBC,EAAAA,MAAM,EAAE,CADe;AAEvBC,EAAAA,IAAI,EAAE,CAFiB;AAGvBC,EAAAA,MAAM,EAAE,CAHe;AAIvBC,EAAAA,QAAQ,EAAE;AAJa,CAAzB;;AAOO,eAAeC,kBAAf,CACLC,SADK,EAELC,OAFK,EAOJ;AACD,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,MAAR;AAAgBC,IAAAA;AAAhB;AACJD,IAAAA,MAAM,EAAE,KADJ;AAEJC,IAAAA,MAAM,EAAE;AAFJ,KAGDH,OAHC,CAAN;;AAKA,MAAI,EAAEG,MAAM,IAAIV,gBAAZ,CAAJ,EAAmC;AACjC,UAAM,IAAIW,KAAJ,CAAU,2CAA2CD,MAArD,CAAN;AACD;;AACD,QAAME,MAAM,GAAG,wBAAcJ,IAAd,CAAf;AACA,MAAIK,EAAE,GAAGJ,MAAM,GAAG,CAAH,GAAO,CAAtB;AACA,MAAIK,EAAE,GAAGd,gBAAgB,CAACU,MAAD,CAAzB;AACA,QAAMK,QAAQ,GAAG,MAAMT,SAAS,CAACU,IAAV,CAAe,IAAf,EAAqB,IAArB,EAA2BH,EAA3B,EAA+BC,EAA/B,EAAmCF,MAAnC,CAAvB;AAEA,QAAMK,eAAe,GAAGF,QAAQ,CAAC,CAAD,CAAhC;AACA,QAAMG,aAAa,GAAGH,QAAQ,CAAC,IAAIE,eAAL,CAA9B;AACA,QAAME,SAAS,GAAGJ,QAAQ,CAACK,KAAT,CAAe,CAAf,EAAkB,IAAIH,eAAtB,EAAuCI,QAAvC,CAAgD,KAAhD,CAAlB;AACA,QAAMC,cAAc,GAAGP,QAAQ,CAC5BK,KADoB,CACd,IAAIH,eAAJ,GAAsB,CADR,EACW,IAAIA,eAAJ,GAAsB,CAAtB,GAA0BC,aADrC,EAEpBG,QAFoB,CAEX,OAFW,CAAvB;AAGA,QAAME,SAAS,GAAGR,QAAQ,CACvBK,KADe,CAEd,IAAIH,eAAJ,GAAsB,CAAtB,GAA0BC,aAFZ,EAGd,IAAID,eAAJ,GAAsB,CAAtB,GAA0BC,aAA1B,GAA0C,EAH5B,EAKfG,QALe,CAKN,KALM,CAAlB;AAMA,SAAO;AAAEF,IAAAA,SAAF;AAAaG,IAAAA,cAAb;AAA6BC,IAAAA;AAA7B,GAAP;AACD","sourcesContent":["// @flow\nimport type Transport from \"@ledgerhq/hw-transport\";\nimport { bip32asBuffer } from \"./bip32\";\n\n/**\n * address format is one of legacy | p2sh | bech32 | cashaddr\n */\nexport type AddressFormat = \"legacy\" | \"p2sh\" | \"bech32\" | \"cashaddr\";\n\nconst addressFormatMap = {\n  legacy: 0,\n  p2sh: 1,\n  bech32: 2,\n  cashaddr: 3,\n};\n\nexport async function getWalletPublicKey(\n  transport: Transport<*>,\n  options: { path: string, verify?: boolean, format?: AddressFormat }\n): Promise<{\n  publicKey: string,\n  bitcoinAddress: string,\n  chainCode: string,\n}> {\n  const { path, verify, format } = {\n    verify: false,\n    format: \"legacy\",\n    ...options,\n  };\n  if (!(format in addressFormatMap)) {\n    throw new Error(\"btc.getWalletPublicKey invalid format=\" + format);\n  }\n  const buffer = bip32asBuffer(path);\n  var p1 = verify ? 1 : 0;\n  var p2 = addressFormatMap[format];\n  const response = await transport.send(0xe0, 0x40, p1, p2, buffer);\n\n  const publicKeyLength = response[0];\n  const addressLength = response[1 + publicKeyLength];\n  const publicKey = response.slice(1, 1 + publicKeyLength).toString(\"hex\");\n  const bitcoinAddress = response\n    .slice(1 + publicKeyLength + 1, 1 + publicKeyLength + 1 + addressLength)\n    .toString(\"ascii\");\n  const chainCode = response\n    .slice(\n      1 + publicKeyLength + 1 + addressLength,\n      1 + publicKeyLength + 1 + addressLength + 32\n    )\n    .toString(\"hex\");\n  return { publicKey, bitcoinAddress, chainCode };\n}\n"],"file":"getWalletPublicKey.js"}