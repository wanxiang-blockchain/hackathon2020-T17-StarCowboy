{"version":3,"sources":["../src/signP2SHTransaction.js"],"names":["defaultArg","lockTime","DEFAULT_LOCKTIME","sigHashType","SIGHASH_ALL","segwit","transactionVersion","DEFAULT_VERSION","signP2SHTransaction","transport","arg","inputs","associatedKeysets","outputScriptHex","nullScript","Buffer","alloc","nullPrevout","defaultVersion","writeUInt32LE","trustedInputs","regularOutputs","signatures","firstRun","resuming","targetTransaction","version","getTrustedInputCall","getTrustedInputBIP143","getTrustedInput","outputScript","from","input","trustedInput","sequence","length","DEFAULT_SEQUENCE","push","value","slice","outputs","index","i","script","prevout","pseudoTX","Object","assign","pseudoTrustedInputs","signature","toString"],"mappings":"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","sourcesContent":["//@flow\nimport type Transport from \"@ledgerhq/hw-transport\";\nimport { getTrustedInput } from \"./getTrustedInput\";\nimport { startUntrustedHashTransactionInput } from \"./startUntrustedHashTransactionInput\";\nimport { getTrustedInputBIP143 } from \"./getTrustedInputBIP143\";\nimport { signTransaction } from \"./signTransaction\";\nimport { hashOutputFull } from \"./finalizeInput\";\nimport type { TransactionOutput, Transaction } from \"./types\";\nimport {\n  DEFAULT_LOCKTIME,\n  DEFAULT_VERSION,\n  DEFAULT_SEQUENCE,\n  SIGHASH_ALL,\n} from \"./constants\";\n\nconst defaultArg = {\n  lockTime: DEFAULT_LOCKTIME,\n  sigHashType: SIGHASH_ALL,\n  segwit: false,\n  transactionVersion: DEFAULT_VERSION,\n};\n\n/**\n *\n */\nexport type SignP2SHTransactionArg = {\n  inputs: Array<[Transaction, number, ?string, ?number]>,\n  associatedKeysets: string[],\n  outputScriptHex: string,\n  lockTime?: number,\n  sigHashType?: number,\n  segwit?: boolean,\n  transactionVersion?: number,\n};\n\nexport async function signP2SHTransaction(\n  transport: Transport<*>,\n  arg: SignP2SHTransactionArg\n) {\n  const {\n    inputs,\n    associatedKeysets,\n    outputScriptHex,\n    lockTime,\n    sigHashType,\n    segwit,\n    transactionVersion,\n  } = { ...defaultArg, ...arg };\n  // Inputs are provided as arrays of [transaction, output_index, redeem script, optional sequence]\n  // associatedKeysets are provided as arrays of [path]\n  const nullScript = Buffer.alloc(0);\n  const nullPrevout = Buffer.alloc(0);\n  const defaultVersion = Buffer.alloc(4);\n  defaultVersion.writeUInt32LE(transactionVersion, 0);\n  const trustedInputs = [];\n  const regularOutputs: Array<TransactionOutput> = [];\n  const signatures = [];\n  let firstRun = true;\n  const resuming = false;\n  let targetTransaction: Transaction = {\n    inputs: [],\n    version: defaultVersion,\n  };\n\n  const getTrustedInputCall = segwit ? getTrustedInputBIP143 : getTrustedInput;\n  const outputScript = Buffer.from(outputScriptHex, \"hex\");\n\n  for (let input of inputs) {\n    if (!resuming) {\n      const trustedInput = await getTrustedInputCall(\n        transport,\n        input[1],\n        input[0]\n      );\n\n      let sequence = Buffer.alloc(4);\n      sequence.writeUInt32LE(\n        input.length >= 4 && typeof input[3] === \"number\"\n          ? input[3]\n          : DEFAULT_SEQUENCE,\n        0\n      );\n      trustedInputs.push({\n        trustedInput: false,\n        value: segwit\n          ? Buffer.from(trustedInput, \"hex\")\n          : Buffer.from(trustedInput, \"hex\").slice(4, 4 + 0x24),\n        sequence,\n      });\n    }\n\n    const { outputs } = input[0];\n    const index = input[1];\n    if (outputs && index <= outputs.length - 1) {\n      regularOutputs.push(outputs[index]);\n    }\n  }\n\n  // Pre-build the target transaction\n  for (let i = 0; i < inputs.length; i++) {\n    let sequence = Buffer.alloc(4);\n    sequence.writeUInt32LE(\n      inputs[i].length >= 4 && typeof inputs[i][3] === \"number\"\n        ? inputs[i][3]\n        : DEFAULT_SEQUENCE,\n      0\n    );\n    targetTransaction.inputs.push({\n      script: nullScript,\n      prevout: nullPrevout,\n      sequence,\n    });\n  }\n\n  if (segwit) {\n    await startUntrustedHashTransactionInput(\n      transport,\n      true,\n      targetTransaction,\n      trustedInputs,\n      true\n    );\n    await hashOutputFull(transport, outputScript);\n  }\n\n  for (let i = 0; i < inputs.length; i++) {\n    const input = inputs[i];\n    let script =\n      inputs[i].length >= 3 && typeof input[2] === \"string\"\n        ? Buffer.from(input[2], \"hex\")\n        : regularOutputs[i].script;\n    let pseudoTX = Object.assign({}, targetTransaction);\n    let pseudoTrustedInputs = segwit ? [trustedInputs[i]] : trustedInputs;\n    if (segwit) {\n      pseudoTX.inputs = [{ ...pseudoTX.inputs[i], script }];\n    } else {\n      pseudoTX.inputs[i].script = script;\n    }\n    await startUntrustedHashTransactionInput(\n      transport,\n      !segwit && firstRun,\n      pseudoTX,\n      pseudoTrustedInputs,\n      segwit\n    );\n\n    if (!segwit) {\n      await hashOutputFull(transport, outputScript);\n    }\n\n    const signature = await signTransaction(\n      transport,\n      associatedKeysets[i],\n      lockTime,\n      sigHashType\n    );\n\n    signatures.push(\n      segwit\n        ? signature.toString(\"hex\")\n        : signature.slice(0, signature.length - 1).toString(\"hex\")\n    );\n    targetTransaction.inputs[i].script = nullScript;\n    if (firstRun) {\n      firstRun = false;\n    }\n  }\n\n  return signatures;\n}\n"],"file":"signP2SHTransaction.js"}