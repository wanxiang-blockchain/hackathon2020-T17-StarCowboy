{"version":3,"sources":["../src/splitTransaction.js"],"names":["splitTransaction","transactionHex","isSegwitSupported","hasTimestamp","hasExtraData","additionals","inputs","outputs","witness","offset","timestamp","Buffer","alloc","nExpiryHeight","nVersionGroupId","extraData","isDecred","includes","transaction","from","version","slice","overwinter","equals","varint","numberInputs","i","prevout","script","tree","sequence","push","numberOutputs","amount","witnessScript","locktime","length","Error","t"],"mappings":"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","sourcesContent":["// @flow\nimport { log } from \"@ledgerhq/logs\";\nimport type { Transaction } from \"./types\";\nimport { getVarint } from \"./varint\";\nimport { formatTransactionDebug } from \"./debug\";\n\nexport function splitTransaction(\n  transactionHex: string,\n  isSegwitSupported: ?boolean = false,\n  hasTimestamp?: boolean = false,\n  hasExtraData?: boolean = false,\n  additionals: Array<string> = []\n): Transaction {\n  const inputs = [];\n  const outputs = [];\n  var witness = false;\n  let offset = 0;\n  let timestamp = Buffer.alloc(0);\n  let nExpiryHeight = Buffer.alloc(0);\n  let nVersionGroupId = Buffer.alloc(0);\n  let extraData = Buffer.alloc(0);\n  const isDecred = additionals.includes(\"decred\");\n  const transaction = Buffer.from(transactionHex, \"hex\");\n  const version = transaction.slice(offset, offset + 4);\n  const overwinter =\n    version.equals(Buffer.from([0x03, 0x00, 0x00, 0x80])) ||\n    version.equals(Buffer.from([0x04, 0x00, 0x00, 0x80]));\n  offset += 4;\n  if (\n    !hasTimestamp &&\n    isSegwitSupported &&\n    transaction[offset] === 0 &&\n    transaction[offset + 1] !== 0\n  ) {\n    offset += 2;\n    witness = true;\n  }\n  if (hasTimestamp) {\n    timestamp = transaction.slice(offset, 4 + offset);\n    offset += 4;\n  }\n  if (overwinter) {\n    nVersionGroupId = transaction.slice(offset, 4 + offset);\n    offset += 4;\n  }\n  let varint = getVarint(transaction, offset);\n  const numberInputs = varint[0];\n  offset += varint[1];\n  for (let i = 0; i < numberInputs; i++) {\n    const prevout = transaction.slice(offset, offset + 36);\n    offset += 36;\n    let script = Buffer.alloc(0);\n    let tree = Buffer.alloc(0);\n    //No script for decred, it has a witness\n    if (!isDecred) {\n      varint = getVarint(transaction, offset);\n      offset += varint[1];\n      script = transaction.slice(offset, offset + varint[0]);\n      offset += varint[0];\n    } else {\n      //Tree field\n      tree = transaction.slice(offset, offset + 1);\n      offset += 1;\n    }\n\n    const sequence = transaction.slice(offset, offset + 4);\n    offset += 4;\n    inputs.push({ prevout, script, sequence, tree });\n  }\n  varint = getVarint(transaction, offset);\n  const numberOutputs = varint[0];\n  offset += varint[1];\n  for (let i = 0; i < numberOutputs; i++) {\n    const amount = transaction.slice(offset, offset + 8);\n    offset += 8;\n\n    if (isDecred) {\n      //Script version\n      offset += 2;\n    }\n\n    varint = getVarint(transaction, offset);\n    offset += varint[1];\n    const script = transaction.slice(offset, offset + varint[0]);\n    offset += varint[0];\n    outputs.push({ amount, script });\n  }\n  let witnessScript, locktime;\n  if (witness) {\n    witnessScript = transaction.slice(offset, -4);\n    locktime = transaction.slice(transaction.length - 4);\n  } else {\n    locktime = transaction.slice(offset, offset + 4);\n  }\n  offset += 4;\n  if (overwinter || isDecred) {\n    nExpiryHeight = transaction.slice(offset, offset + 4);\n    offset += 4;\n  }\n  if (hasExtraData) {\n    extraData = transaction.slice(offset);\n  }\n\n  //Get witnesses for Decred\n  if (isDecred) {\n    varint = getVarint(transaction, offset);\n    offset += varint[1];\n    if (varint[0] !== numberInputs) {\n      throw new Error(\"splitTransaction: incoherent number of witnesses\");\n    }\n    for (let i = 0; i < numberInputs; i++) {\n      //amount\n      offset += 8;\n      //block height\n      offset += 4;\n      //block index\n      offset += 4;\n      //Script size\n      varint = getVarint(transaction, offset);\n      offset += varint[1];\n      const script = transaction.slice(offset, offset + varint[0]);\n      offset += varint[0];\n      inputs[i].script = script;\n    }\n  }\n\n  const t: Transaction = {\n    version,\n    inputs,\n    outputs,\n    locktime,\n    witness: witnessScript,\n    timestamp,\n    nVersionGroupId,\n    nExpiryHeight,\n    extraData,\n  };\n\n  log(\n    \"btc\",\n    `splitTransaction ${transactionHex}:\\n${formatTransactionDebug(t)}`\n  );\n\n  return t;\n}\n"],"file":"splitTransaction.js"}